

"""
Password Manager
A program to store userids and the associated passwords. The program should support the following
operations:

1. Add a new userid - password pair into the array [i.e. list].
2. Read a single record from the records.
3. Read all the records present in the list.
4. Update password associated with an existing userid.
5. Delete an existing account/record.
6. Save the data into the file, say csv file and exit/stop the program

Program working:
The program will load the data from the csv/other file into the suitable arrays [i.e. lists] and
the changes/additions/deletions will be done in the respective lists, then once the user presses
stop & save, the data from the lists will be sent to the file.

Program constraints:
1. Userids should be unique.
2. Passwords must be encrypted when stored in the csv file. 
3. When the records have to be displayed, passwords must be decrypted suitably.
"""

"""
When the code is started, data from file will be fetched into the respective arrays [lists] and all
the modifications such as adding new record, updating and deleting them will be done on the arrays
and once the program is stopped, the data in the arrays [lists] will be pushed into the csv file.
"""

####################################################################################

import pandas as pd
import os

###################	Defining the lists & the filepath	###################

filepath = 'New_Records.csv'
arr_username = []
arr_password = []

###################     Creating an empty csv file       ####################

if os.path.isfile(filepath):
    print("Record file already exists. Continuing with the same file.")
    data = pd.read_csv('New_Records.csv')
    print(len(data['Userid'].values))
    print(len(data['Password'].values))

    arr_username = data['Userid'].to_list()
    arr_password = data['Password'].to_list()

    print(arr_username)
    print(arr_password)

    print(type(arr_username))

else:
    print("File does not exist, will be created later while saving the work.")

#################       Defining the methods        ################

def encryption(password):
    encrypt_str = ""
    for i in range(len(password)):
        encrypt_str += chr(ord(password[i]) + 1)

    return encrypt_str


def deEncryption(password):
    deencrypt_str = ""
    for i in range(len(password)):
        deencrypt_str += chr(ord(password[i]) - 1)

    return deencrypt_str


def addPassword():
    print("Enter the details as & when prompted.\n")

    while 1:
        try:
            u_id = input(
                "Enter user id (6-20 chars allowed, alphanumeric/purely numeric/purely alphabetical allowed):\t")

            if u_id.strip() in arr_username:
                print(f"The account with this userid {u_id} can't be created as it is already present in the record. Kindly re - enter a different Userid.\n")
                continue

            if len(u_id.strip()) not in range(6, 21):
                print("Userid should have characters between 6 - 20 (including these values). Kindly re - enter an appropriate Userid.\n")
                continue

            arr_username.append(u_id.strip())
            print("\nUserid added successfully to the array [list].\n")
            break


        except ValueError as v:
            print("\nSome problem occurred (ValueError).\n")
            print(v)
            continue

        except TypeError as t:
            print("Some problem occurred (TypeError).\n")
            print(t)
            continue

    while 1:
        try:
            temp_pass = input(f"Enter password for the user {u_id} (length between 8-16 & alphanumeric with special characters):\t")

            if len(temp_pass.strip()) not in range(8, 17):
                print("Length of password should be between 8 and 16 (including these 2 nos). Please re - enter the password.\n")
                continue

            if temp_pass.strip().isdigit():
                print("Password can't be purely numerical. Please re - enter the password.\n")
                continue

            if temp_pass.strip().isalpha():
                print("Password can't be purely alphabetical. Please re - enter the password.\n")
                continue

            val = encryption(temp_pass.strip())
            arr_password.append(val)
            print("Password added succesfully to the array [list].")
            break

        except TypeError as t:
            print("Some problem occurred (TypeError).\n")
            print(t)
            continue

        except ValueError as v:
            print("Some problem occurred (ValueError).\n")
            print(v)
            continue


def readSinglePassword():

    if len(arr_username) == 0:
        print("There are no records in the list.\n")

    else:
        u_id = input("Enter the userid whose password has to be read:\t")

        if u_id in arr_username:
            ind = arr_username.index(u_id)
            val = deEncryption(arr_password[ind])
            print(f"The password of the user with the userid {u_id} is {val}.\n")

        else:
            print(f"There is no account with this userid {u_id}.\n")


def readAllPassword():
    print("Userid\tPassword")

    if len(arr_username) == 0:
        print("There are no records in the list.\n")

    else:
        for i in range(len(arr_username)):
            val = deEncryption(arr_password[i])
            print(f"{arr_username[i]}\t{val}")


def delSinglePassword():
    try:
        if len(arr_username) == 0:
            print("There are no records in the list.\n")

        else:
            temp_uid = input("Enter the userid whose record has to be deleted:\t")

            if temp_uid in arr_username:
                ind = arr_username.index(temp_uid)

                arr_password.pop(ind)
                arr_username.pop(ind)

                print(f"Account with the userid {temp_uid} has been deleted successfully.\n")

            else:
                print(f"There is no account with this userid {temp_uid}.\n")
            
    except TypeError as t:
            print("Some problem occurred (TypeError).\n")
            print(t)

    except ValueError as v:
            print("Some problem occurred (ValueError).\n")
            print(v)


def updateAPassword():
    while 1:
        try:
            if len(arr_username) == 0:
                print("There are no records in the list.\n")

            else:
                temp_uid = input("Enter the userid whose password has to be changed:\t")
                if temp_uid.strip() not in arr_username:
                    print(f"\nThere is no account with this userid {temp_uid}.\n")
                    break

                else:
                    ind = arr_username.index(temp_uid)

                temp_pass = input(f"Enter the current password associated with this userid {temp_uid}:\t")
                val = deEncryption(arr_password[ind])
                if temp_pass.strip() == val:

                    while 1:
                        new_pass = input(f"Enter the new password for the userid {temp_uid}:\t")

                        if len(new_pass.strip()) not in range(8, 17):
                            print(
                                "Length of the new password should be between 8 and 16 (including these 2 nos). Please re "
                                "- enter the password.\n")
                            continue

                        if new_pass.strip().isdigit():
                            print("Password can't be purely numerical. Please re - enter the password.\n")
                            continue

                        if new_pass.strip().isalpha():
                            print("Password can't be purely alphabetical. Please re - enter the password.\n")
                            continue

                        val = encryption(new_pass.strip())
                        arr_password[ind] = val
                        print(f"\nThe password for the user with userid {temp_uid} has been updated successfully.\n")
                        break

                else:
                    print("There is some password mismatch... The password can't be updated.")
            break



        except ValueError as v:
            print("Some problem occurred (ValueError).\n")
            print(v)

        except TypeError as t:
            print("Some problem occurred (TypeError).\n")
            print(t)


def saveDataToFile(a1, a2):
    temp_dict = {
        'Userid': a1,
        'Password': a2
    }
    df = pd.DataFrame(temp_dict)
    df.to_csv('New_Records.csv', index=False)


###################      Executing the code      ######################

while 1:
    print("\nWelcome to password manager\n")
    print("Press:")
    print("1. to add a new user")
    print("2. to read a single user details")
    print("3. to read the details of all the users")
    print("4. to update a password")
    print("5. to delete a user details")
    print("6. to save the changes to the file and exit the code\n")

    try:
        choice = int(input("Enter operation no.:\t"))

    except ValueError as v:
        print("Invalid option no (ValueError).")
        print(v)
        continue

    except TypeError as t:
        print("Invalid option no (TypeError).")
        print(t)
        continue

    if choice == 1:
        addPassword()

    elif choice == 2:
        readSinglePassword()

    elif choice == 3:
        readAllPassword()

    elif choice == 4:
        updateAPassword()

    elif choice == 5:
        delSinglePassword()

    elif choice == 6:
        saveDataToFile(arr_username, arr_password)
        break

    else:
        print("\n\nInvalid option no. entered.\n\n")

"""
Future scope/improvements:

1. Suitable UI can be designed for this program.

2. One can think of eliminating the need of lists in this program, i.e. record inserting, updating,
reading & deleting should happen straightaway to and from the file, without having to be done via lists.

3. One can separate/split the code into 2 or more classes & then access the methods using suitable
objects in order to make the program more structured and more object oriented.
"""
